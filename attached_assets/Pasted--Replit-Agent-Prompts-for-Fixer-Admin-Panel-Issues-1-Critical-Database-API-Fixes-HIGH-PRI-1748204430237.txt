# Replit Agent Prompts for Fixer Admin Panel Issues

## 1. Critical Database & API Fixes (HIGH PRIORITY)

**Prompt:**
```
I need to fix critical issues in my Fixer gig economy platform's admin panel. The main problems are:

CRITICAL ISSUES:
1. SQL syntax errors with "desc" keyword causing dashboard stats to fail
2. Admin panel relies on mock/sample data instead of real database queries
3. Incomplete API endpoints returning placeholder data

Key files to fix:
- server/admin-routes.ts (admin API routes)
- server/routes.ts (main API endpoints)
- client/src/components/AdminPanelV2.tsx (admin interface)

Specific endpoints that need real implementation:
- /api/admin/support-tickets (currently returns sample data)
- /api/admin/alerts (returns hardcoded examples)
- /api/admin/reports (not fully implemented)
- Dashboard statistics queries (failing with SQL errors)

Database tables available: users, jobs, applications, tasks, payments, earnings, messages, notifications, reviews

Please:
1. Fix all SQL syntax errors, especially around "desc" keyword usage
2. Replace all mock/sample data with real database queries
3. Implement proper API endpoints that fetch actual data
4. Add proper error handling for admin queries
5. Test that dashboard statistics load correctly

Focus on getting real data flowing through the admin interface instead of placeholder content.
```

## 2. Support Ticket System Implementation (HIGH PRIORITY)

**Prompt:**
```
The support ticket system in my Fixer admin panel is partially implemented and needs completion. Current issues:

SUPPORT TICKET PROBLEMS:
- Ticket deletion doesn't persist to database
- Response system only partially implemented
- File attachments not working
- Priority/status updates inconsistent
- CRUD operations incomplete

Key files:
- client/src/components/EnhancedTicketDialog.tsx (ticket interface)
- server/admin-routes.ts (ticket API endpoints)
- Database: support_tickets table (if exists) or needs creation

Required functionality:
- Full CRUD operations (Create, Read, Update, Delete)
- Ticket status management (open, in_progress, resolved, closed)
- Priority levels (low, medium, high, urgent)
- Admin response system with threading
- File attachment support for tickets
- Email notifications to users when tickets are updated
- Ticket assignment to admin users

Please:
1. Create proper database schema for support tickets if missing
2. Implement complete CRUD API endpoints
3. Fix the ticket deletion and persistence issues
4. Add file upload capability for ticket attachments
5. Implement proper status and priority update system
6. Add email notifications for ticket updates
7. Create admin assignment functionality
8. Test all ticket operations thoroughly

This is critical for customer support functionality.
```

## 3. User Management & Security Fixes (HIGH PRIORITY)

**Prompt:**
```
My Fixer admin panel has serious user management and security issues that need immediate attention:

SECURITY & USER MANAGEMENT ISSUES:
- User deletion may not cascade properly (orphaned records)
- Account type switching not fully supported
- Admin privilege management incomplete
- Insufficient admin authorization on routes
- Missing audit trail for admin actions
- No rate limiting on admin endpoints

Key files:
- server/admin-routes.ts (admin endpoints)
- server/auth.ts (authentication logic)
- client/src/components/AdminPanelV2.tsx (admin interface)
- Database: users table and related tables

Required security improvements:
- Proper admin route protection and authorization
- Comprehensive audit logging for all admin actions
- Rate limiting on admin API endpoints
- Safe user deletion with proper cascade handling
- Admin privilege escalation/management system

User management features needed:
- Safe user account deletion (handle foreign key constraints)
- Account type switching (worker ↔ job_poster ↔ both)
- User verification management
- Account suspension/activation
- Bulk user operations

Please:
1. Add robust admin authorization middleware
2. Implement comprehensive audit logging system
3. Add rate limiting to all admin endpoints
4. Fix user deletion to handle foreign key constraints safely
5. Create proper admin privilege management
6. Add account type switching functionality
7. Implement user verification management
8. Add security headers and CSRF protection for admin routes

Security is critical - ensure no unauthorized access to admin functions.
```

## 4. Financial Data & Stripe Integration (MEDIUM PRIORITY)

**Prompt:**
```
The financial reporting and Stripe integration in my Fixer admin panel has major data inconsistencies and missing features:

FINANCIAL ISSUES:
- Transaction history incomplete
- Revenue calculations may be inaccurate
- Platform fee tracking inconsistent
- Payout tracking not comprehensive
- Limited Stripe admin functionality (refunds, disputes, payouts)

Key files:
- server/api/stripe-api.ts (Stripe integration)
- server/api/stripe-connect.ts (Stripe Connect)
- server/admin-routes.ts (admin financial endpoints)
- Database: payments, earnings, transactions tables

Required financial features:
- Accurate revenue calculation and reporting
- Complete transaction history with filtering
- Platform fee tracking and reporting
- Payout management and tracking
- Refund processing through admin interface
- Dispute handling workflow
- Financial analytics and charts

Stripe admin integration needed:
- Process refunds directly from admin panel
- Manage worker payouts
- Handle disputes and chargebacks
- View detailed Stripe transaction data
- Reconcile platform vs Stripe data

Please:
1. Fix revenue calculation accuracy issues
2. Implement complete transaction history with proper filtering
3. Add comprehensive platform fee tracking
4. Create detailed payout management system
5. Integrate Stripe admin functions (refunds, disputes, payouts)
6. Add financial reporting with charts and analytics
7. Create data reconciliation between platform and Stripe
8. Add export functionality for financial reports
9. Implement automated financial health checks

Accurate financial data is crucial for business operations.
```

## 5. Job Management & Content Moderation (MEDIUM PRIORITY)

**Prompt:**
```
My Fixer admin panel lacks proper job management and content moderation features:

JOB MANAGEMENT GAPS:
- Job approval/rejection workflow missing
- Content moderation not implemented
- Flagged job handling incomplete
- Job analytics limited
- No bulk job operations

CONTENT MODERATION MISSING:
- Automated content filtering
- Moderation queue for flagged content
- Content reporting system
- Inappropriate content detection

Key files:
- server/admin-routes.ts (admin job endpoints)
- client/src/components/AdminPanelV2.tsx (admin interface)
- Database: jobs, job_reports, moderation tables

Required job management features:
- Job approval/rejection workflow
- Bulk job operations (approve, reject, delete)
- Job analytics and reporting
- Flagged job queue and handling
- Job performance metrics

Content moderation system needed:
- Automated content filtering for inappropriate content
- User reporting system for jobs/profiles
- Moderation queue for admin review
- Content categorization and tagging
- Automated response to policy violations

Please:
1. Create job approval/rejection workflow
2. Implement content moderation queue system
3. Add automated content filtering capabilities
4. Create user reporting system for inappropriate content
5. Build bulk job management operations
6. Add comprehensive job analytics and metrics
7. Implement flagged content handling workflow
8. Create content policy enforcement tools
9. Add job performance tracking and reporting

This is essential for maintaining platform quality and safety.
```

## 6. UI/UX & Performance Improvements (MEDIUM PRIORITY)

**Prompt:**
```
My Fixer admin panel has significant UI/UX and performance issues that hurt usability:

UI/UX ISSUES:
- Not fully responsive on mobile devices
- Loading states inconsistent across tabs
- Tab navigation state management problems
- Z-index conflicts with modals and dialogs
- Poor mobile admin experience

PERFORMANCE ISSUES:
- Makes multiple unnecessary API calls
- No pagination for large datasets
- Real-time updates missing
- Inefficient data fetching
- Large data sets cause performance degradation

Key files:
- client/src/components/AdminPanelV2.tsx (main admin interface)
- Admin component files for individual features
- CSS/styling files

Required improvements:
- Fully responsive design for mobile admin use
- Consistent loading states and error handling
- Proper tab navigation state management
- Fix z-index conflicts in modals
- Add pagination for all large data lists
- Implement real-time updates for admin data
- Optimize API call patterns

Please:
1. Make admin panel fully responsive for mobile devices
2. Add consistent loading states and error boundaries
3. Fix tab navigation and state management issues
4. Resolve z-index conflicts in modals and dialogs
5. Implement pagination for users, jobs, transactions lists
6. Add real-time updates using WebSockets for admin data
7. Optimize data fetching to reduce unnecessary API calls
8. Add proper error handling and retry mechanisms
9. Improve overall admin interface performance
10. Add keyboard shortcuts for common admin tasks

Focus on creating a professional, efficient admin experience that works on all devices.
```

## 7. Advanced Analytics & Reporting (LOW PRIORITY)

**Prompt:**
```
My Fixer admin panel needs advanced analytics and comprehensive reporting capabilities:

MISSING ANALYTICS:
- No comprehensive reporting dashboard
- Limited charts and graphs
- No trend analysis
- Missing business insights
- No system health monitoring

REPORTING GAPS:
- No advanced user analytics
- Limited job performance metrics
- Missing financial trend analysis
- No platform usage statistics
- Export functionality incomplete

Key files:
- client/src/components/AdminPanelV2.tsx (admin interface)
- server/admin-routes.ts (analytics endpoints)
- Consider adding analytics service/library

Required analytics features:
- User growth and engagement metrics
- Job posting and completion trends
- Revenue and financial analytics
- Platform usage statistics
- Geographic distribution analysis
- Peak usage time analysis

Reporting features needed:
- Comprehensive business intelligence dashboard
- Exportable reports (PDF, CSV, Excel)
- Scheduled report generation
- Custom date range filtering
- Comparative analysis (month-over-month, year-over-year)

Please:
1. Create comprehensive analytics dashboard with charts
2. Implement user growth and engagement metrics
3. Add job performance and trend analysis
4. Create financial analytics with revenue trends
5. Build geographic and demographic analytics
6. Add system health and performance monitoring
7. Implement report export functionality (PDF, CSV)
8. Create scheduled report generation system
9. Add custom date range filtering for all analytics
10. Build comparative analysis tools
11. Add real-time analytics updates

Use chart libraries like Chart.js or Recharts for visualizations. Focus on actionable business insights that help make data-driven decisions.
```

## 8. System Integration & Monitoring (LOW PRIORITY)

**Prompt:**
```
My Fixer admin panel needs better system integration and monitoring capabilities:

INTEGRATION ISSUES:
- No monitoring of external service health (Stripe, email services)
- Email notifications for admin actions not implemented
- Limited backup and recovery tools through admin interface
- No system health monitoring (currently hardcoded "healthy" status)

MONITORING GAPS:
- No real system health metrics
- Missing service uptime monitoring
- No performance metric tracking
- Alert system incomplete

Key files:
- server/admin-routes.ts (monitoring endpoints)
- External service integration files
- System monitoring configuration

Required system monitoring:
- Real-time system health dashboard
- External service status monitoring (Stripe, email, database)
- Performance metrics tracking
- Automated alert system for issues
- Uptime monitoring and reporting

Integration improvements needed:
- Email notification system for admin actions
- Database backup management interface
- Service dependency monitoring
- API health checks and status reporting

Please:
1. Implement real system health monitoring (replace hardcoded status)
2. Add external service health monitoring (Stripe, email, database)
3. Create automated alert system for system issues
4. Build email notification system for admin actions
5. Add database backup management through admin interface
6. Implement API health checks and status reporting
7. Create service dependency monitoring
8. Add performance metrics dashboard
9. Build uptime monitoring and reporting
10. Create system maintenance mode functionality

Focus on proactive monitoring that prevents issues before they affect users. Include proper alerting for critical system problems.
```

---

## Priority Order Recommendation

**Immediate (This Week):**
1. Critical Database & API Fixes (#1)
2. Support Ticket System (#2)
3. User Management & Security (#3)

**Next Sprint (1-2 Weeks):**
4. Financial Data & Stripe Integration (#4)
5. Job Management & Content Moderation (#5)

**Following Sprints:**
6. UI/UX & Performance (#6)
7. Advanced Analytics (#7)
8. System Integration & Monitoring (#8)

Each prompt is self-contained and provides specific technical requirements, file locations, and clear deliverables for Replit Agent to implement.