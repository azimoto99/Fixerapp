Skip to content

Manage default payment methods in the Dashboard
Create account
or
Sign in
HomePaymentsAdd payment methods
Manage default payment methods in the Dashboard
Upgrade your API to manage payment methods in the Dashboard by default.
On August 16, 2023, Stripe updated the selection process for default payment methods that apply to PaymentIntents and SetupIntents created with the /v1/payment_intents and /v1/setup_intents APIs.

In prior versions of the Stripe API, if you didn’t specify a payment_method_types parameter during the creation request, Stripe would default to using the card payment method for both PaymentIntents and SetupIntents.

Moving forward, Stripe applies eligible payment methods that you manage from your Dashboard to your PaymentIntents and SetupIntents by default if you don’t specify the payment_method_types parameter in the creation request.

Payment methods
By default, Stripe enables cards and other common payment methods. You can turn individual payment methods on or off in the Stripe Dashboard. In Checkout, Stripe evaluates the currency and any restrictions, then dynamically presents the supported payment methods to the customer.

To see how your payment methods appear to customers, enter a transaction ID or set an order amount and currency in the Dashboard.

You can enable Apple Pay and Google Pay in your payment methods settings. By default, Apple Pay is enabled and Google Pay is disabled. However, in some cases Stripe filters them out even when they’re enabled. We filter Google Pay if you enable automatic tax without collecting a shipping address.

Checkout’s Stripe-hosted pages don’t need integration changes to enable Apple Pay or Google Pay. Stripe handles these payments the same way as other card payments.

Update your payment flows
Choose from the upgrade path that matches your current Stripe integration:


Elements

Checkout and Payment Links

API
If your integration uses Card Element or individual payment method Elements, we recommend migrating to the Payment Element. This single, unified integration allows you to accept over 25 different payment methods.

Create the PaymentIntent
In this version of the API, specifying the automatic_payment_methods.enabled parameter is optional. If you don’t specify it, Stripe assumes a value of true, which enables its functionality by default.

Command Line
Select a language



curl https://api.stripe.com/v1/payment_intents \
  -u "sk_test_BQokikJOvBiI2HlWgH4olfQ2:" \
  -d amount=1099 \
  -d currency=usd
Client-side confirmations with Stripe.js
If your integration uses Stripe.js to confirm payments with confirmPayment or by payment method, your existing processes remains the same and requires no further changes.

When you confirm payments, we recommend that you provide the return_url parameter. This allows you to accept payment methods that require redirect.


HTML + JS

React
checkout.js



const form = document.getElementById('payment-form');

form.addEventListener('submit', async (event) => {
  event.preventDefault();

  const {error} = await stripe.confirmPayment({
    //`Elements` instance that was used to create the Payment Element
    elements,
    confirmParams: {
      return_url: 'https://example.com/return_url',
    },
  });

  if (error) {
    // This point will only be reached if there is an immediate error when
    // confirming the payment. Show error to your customer (for example, payment
    // details incomplete)
    const messageContainer = document.querySelector('#error-message');
    messageContainer.textContent = error.message;
  } else {
    // Your customer will be redirected to your `return_url`. For some payment
    // methods like iDEAL, your customer will be redirected to an intermediate
    // site first to authorize the payment, then redirected to the `return_url`.
  }
});
Server-side confirmation
If you use server-side confirmation, you must use the return_url parameter in your integration.

Command Line
Select a language



curl https://api.stripe.com/v1/payment_intents \
  -u "sk_test_BQokikJOvBiI2HlWgH4olfQ2:" \
  -d amount=1099 \
  -d currency=usd \
  -d confirm=true \
  -d payment_method={{PAYMENT_METHOD_ID}} \
  --data-urlencode return_url="https://example.com/return_url"
Alternatively, you can create the PaymentIntent or SetupIntent with the automatic_payment_methods.allow_redirects parameter set to never. This disables the return_url requirement on confirmation. You can still manage payment methods from the Dashboard, but the payment methods that require redirects won’t be eligible.

Command Line
Select a language



curl https://api.stripe.com/v1/payment_intents \
  -u "sk_test_BQokikJOvBiI2HlWgH4olfQ2:" \
  -d amount=1099 \
  -d currency=usd \
  -d confirm=true \
  -d payment_method={{PAYMENT_METHOD_ID}} \
  -d "automatic_payment_methods[enabled]"=true \
  -d "automatic_payment_methods[allow_redirects]"=never
Lastly, you can create the PaymentIntent or SetupIntent with the payment_method_types parameter. This also disables the return_url requirement on confirmation. With this option, you can’t manage payment methods from the Dashboard.

Command Line
Select a language



curl https://api.stripe.com/v1/payment_intents \
  -u "sk_test_BQokikJOvBiI2HlWgH4olfQ2:" \
  -d amount=1099 \
  -d currency=usd \
  -d confirm=true \
  -d payment_method={{PAYMENT_METHOD_ID}} \
  -d "payment_method_types[]"=card
Was this page helpful?
Yes
No
Need help? Contact Support.
Join our early access program.
Check out our changelog.
Questions? Contact Sales.
LLM? Read llms.txt.


Sign up for developer updates:

Sign up
You can unsubscribe at any time. Read our privacy policy.
