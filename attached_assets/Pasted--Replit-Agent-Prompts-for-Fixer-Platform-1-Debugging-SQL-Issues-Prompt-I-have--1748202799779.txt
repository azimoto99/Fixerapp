# Replit Agent Prompts for Fixer Platform

## 1. Debugging SQL Issues

**Prompt:**
```
I have a gig economy platform called Fixer with critical SQL query errors. The main issues are:

1. Database queries failing with syntax errors around the "desc" keyword
2. Queries in the earnings system are failing completely

Key files to examine:
- server/storage.ts (database operations)
- server/routes.ts (4000+ lines of API endpoints)
- shared/schema.ts (database schema)

Database setup: PostgreSQL with Drizzle ORM

Please:
1. Find all SQL queries using "desc" and fix the syntax errors
2. Debug the earnings system queries that are preventing earnings display
3. Test the fixes to ensure they work with our PostgreSQL database
4. Look for any other potential SQL syntax issues

The platform has users, jobs, applications, tasks, payments, earnings, messages, notifications, and reviews tables. Focus on queries that are currently breaking the application.
```

## 2. Payment System Troubleshooting

**Prompt:**
```
My Fixer gig economy platform has payment API issues where some endpoints are returning empty responses. The payment system uses Stripe with escrow functionality.

Key files to investigate:
- server/api/stripe-api.ts (Stripe payment processing)
- server/api/stripe-connect.ts (Stripe Connect for workers)
- server/api/stripe-webhooks.ts (Payment event handling)
- server/routes.ts (main API endpoints)

Payment features that should work:
- Escrow system (hold payments until job completion)
- Worker payouts to bank accounts
- Service fee collection
- Refund processing
- Payment method management

Please:
1. Debug why payment endpoints are returning empty responses
2. Test the Stripe integration and webhook handling
3. Verify the escrow system is working correctly
4. Check that worker payouts are processing properly
5. Ensure error handling is robust for payment failures

The platform should handle both fixed-price and hourly rate jobs with automatic transfers.
```

## 3. Feature Development - Advanced Search & File Uploads

**Prompt:**
```
I need to add missing features to my Fixer gig economy platform. Currently missing:

1. Advanced Search - More sophisticated job filtering beyond basic location/category
2. File Uploads - Job attachments and documentation support

Current search functionality is basic proximity-based using Mapbox integration. Jobs have categories, skills, location, and payment terms.

Key files to work with:
- client/src/pages/Home.tsx (main UI)
- client/src/components/ (reusable components)
- server/routes.ts (API endpoints)
- shared/schema.ts (database schema)

Please implement:

**Advanced Search:**
- Filter by skill requirements, price range, job type (fixed/hourly)
- Sort by distance, pay rate, posted date, rating
- Save search preferences
- Search history

**File Uploads:**
- Allow job posters to attach files (images, documents, requirements)
- Let workers upload progress photos and completion documentation
- Secure file storage with access controls
- File type validation and size limits

Use existing authentication and database patterns. The platform already has user profiles, job posting, and payment processing working.
```

## 4. Code Optimization & Performance

**Prompt:**
```
My Fixer gig economy platform needs code optimization and performance improvements. The main issues are:

**Technical Debt:**
- Multiple implementations of similar features
- Database query optimization needed
- 4000+ line routes.ts file that needs refactoring

**Performance Issues:**
- Slow database queries
- Large bundle sizes
- Inefficient real-time updates

Key files to optimize:
- server/routes.ts (massive file, needs breaking up)
- server/storage.ts (database operations)
- client/src/pages/Home.tsx (main UI performance)
- Database queries across the application

Current tech stack: React/TypeScript, Node.js/Express, PostgreSQL/Drizzle ORM, WebSockets

Please:
1. Break up the monolithic routes.ts into logical modules
2. Optimize slow database queries (add indexes, improve query structure)
3. Implement proper error boundaries and recovery mechanisms
4. Add database connection pooling if not present
5. Optimize frontend bundle size and loading performance
6. Improve real-time WebSocket efficiency
7. Add proper caching where appropriate

Focus on the most impactful performance improvements first.
```

## 5. Mobile Deployment Enhancement

**Prompt:**
```
I need help optimizing mobile deployment for my Fixer gig economy platform. Current setup includes PWA support and native build capabilities.

Current mobile configuration:
- capacitor.config.ts (mobile app config)
- expo-config.js (Expo/React Native config)
- build-android.sh (Android APK build script)
- connect-to-phone.sh (development connection)

The platform is mobile-first responsive and supports:
- Location services (GPS tracking)
- Real-time notifications
- Camera access for job photos
- Offline capabilities

Please:
1. Optimize the PWA configuration for better mobile performance
2. Improve the Android build process and test the APK generation
3. Set up iOS build configuration and testing
4. Enhance mobile-specific features like:
   - Better offline support
   - Background location tracking for active jobs
   - Push notification optimization
   - Mobile payment UX improvements
5. Add mobile app store deployment preparation
6. Optimize mobile bundle size and loading speed

Focus on creating a production-ready mobile experience that works seamlessly with the web platform's real-time features and location services.
```

## 6. Database Optimization & Query Performance

**Prompt:**
```
My Fixer gig economy platform needs comprehensive database optimization. Using PostgreSQL with Drizzle ORM on Neon hosting.

Current database structure includes:
- Users (profiles, verification, location)
- Jobs (postings, location, payment terms)  
- Applications (worker applications)
- Tasks (job breakdown)
- Payments (transaction records)
- Earnings (worker earnings tracking)
- Messages (real-time messaging)
- Notifications (push notifications)
- Reviews (rating system)

Key files:
- shared/schema.ts (database schema definitions)
- server/storage.ts (database operations)
- drizzle.config.ts (ORM configuration)

Performance issues:
- Slow location-based job queries
- Inefficient earnings calculations
- Poor performance on job search/filtering
- Real-time messaging queries are slow

Please:
1. Analyze and optimize the database schema with proper indexing
2. Add indexes for location-based queries (jobs near workers)
3. Optimize complex joins for earnings and payment calculations  
4. Improve real-time messaging query performance
5. Add database query monitoring and logging
6. Implement proper connection pooling
7. Create materialized views for heavy reporting queries
8. Optimize the job search and filtering queries
9. Add database migration scripts for the optimizations

Focus on the most impactful query optimizations for a location-based gig platform with real-time features.
```

---

## Usage Instructions

Copy and paste each prompt into Replit Agent based on your priority. Each prompt:
- Provides specific context about your Fixer platform
- Identifies the key files to work with
- Gives clear, actionable tasks
- Focuses on the most impactful improvements

Start with whichever issue is most critical for your platform's current needs.